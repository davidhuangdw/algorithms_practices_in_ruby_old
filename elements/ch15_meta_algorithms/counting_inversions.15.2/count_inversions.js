// Generated by CoffeeScript 1.7.1
(function() {
  var count_and_merge, count_by_merge, divide, naive_count, puts;

  puts = console.log;

  naive_count = function(arr) {
    var i, j, n, result, _i, _j, _ref;
    result = 0;
    n = arr.length;
    for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
      for (j = _j = _ref = i + 1; _ref <= n ? _j < n : _j > n; j = _ref <= n ? ++_j : --_j) {
        if (arr[i] > arr[j]) {
          result++;
        }
      }
    }
    return result;
  };

  count_by_merge = function(arr) {
    var l, r, _ref;
    if (arr.length <= 1) {
      return 0;
    }
    _ref = divide(arr), l = _ref[0], r = _ref[1];
    return count_by_merge(l) + count_by_merge(r) + count_and_merge(arr, l, r);
  };

  count_and_merge = (function() {
    var count, exhaust_remain, i, il, init, ir, keep_pick_smallest;
    count = i = il = ir = void 0;
    init = function() {
      return count = i = il = ir = 0;
    };
    keep_pick_smallest = function(arr, l, r) {
      var fl, fr, _ref, _results;
      _results = [];
      while (!(il >= l.length || ir >= r.length)) {
        _ref = [l[il], r[ir]], fl = _ref[0], fr = _ref[1];
        if (fl <= fr) {
          count += ir;
          _results.push(arr[i++] = l[il++]);
        } else {
          _results.push(arr[i++] = r[ir++]);
        }
      }
      return _results;
    };
    exhaust_remain = function(arr, l, r) {
      var _results;
      while (!(il >= l.length)) {
        count += ir;
        arr[i++] = l[il++];
      }
      _results = [];
      while (!(ir >= r.length)) {
        _results.push(arr[i++] = r[ir++]);
      }
      return _results;
    };
    return function(arr, l, r) {
      init();
      keep_pick_smallest(arr, l, r);
      exhaust_remain(arr, l, r);
      return count;
    };
  })();

  divide = function(arr) {
    var half;
    half = Math.ceil(arr.length / 2);
    return [arr.slice(0, half), arr.slice(half)];
  };

  module.exports = {
    naive_count: naive_count,
    count_by_merge: count_by_merge
  };

}).call(this);

//# sourceMappingURL=count_inversions.map
